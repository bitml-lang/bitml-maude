
load bitml-syntax.maude
load bitml-aux.maude
load bitml-predicate.maude

***
*** Bitml Abstract Semantics and Model-Checking
***
mod BITML-SEM is
    extending BITML-SYNTAX .
    protecting BITML-AUX .
    protecting BITML-PREDICATE-SAT .
    
    var A B A' B' A'' B'' Any : Participant .
    var Part : Set{Participant} .
    var C C' : Contract .
    var D D' : GuardedContract .
    vars v v' v'' v''' : Value .
    vars x y z x' y' z' x'' y'' z'' : Name .
    vars x^ y^ : Set{Name} .
    vars a^ : Set{Secret} .
    vars v^ : List{Value} .
    vars A^ B^ : Set{Participant} .
    vars n^ N^ : List{Nat<} .
    vars t^ t'^ : List{Nat<} .
    vars S S' S'' S''' P P' : Configuration .
    vars a a' : Secret .
    vars n n' N t t' : Nat .
    vars s s' : Secret .
    vars s^ : Set{Secret} .
    vars l l' : Label .
    vars icn cn cn' : Set{Name} .
    var splitEntries : List{SplitEntry} .
    vars p p' : Predicate .
    vars putDeps putSecs : Option .
    
    sort SemConfiguration .
    sort LSemConfiguration .
    subsort SemConfiguration < LSemConfiguration .

    sort Context .
    
    op [_|_|_U_|_] : Nat List{Nat<} Set{Name} Set{Name} Set{Participant} -> Context [ctor frozen] .
    ops Adv Someone : -> Participant .

    op __ : Context Configuration -> SemConfiguration [ctor frozen] .

    op {_}_ : Label SemConfiguration -> LSemConfiguration [ctor frozen] .
    
    op toSemConf_ : Configuration -> SemConfiguration [prec 50] .
    eq toSemConf S = [ 0 | ticks(S) | (names in S) U empty | (participants in S) ] S .

    op toConf_ : SemConfiguration -> Configuration [prec 50] .
    eq toConf C:Context S = S .

    *** Labels
    sort Label .
    
    op _authorize-destroy-of_ : Participant Name -> Label [ctor frozen] .
    op _destroy_ : Participant Name -> Label [ctor frozen] .
    op _split_ : Participant Name -> Label [ctor frozen] .
    op _put(_,_,_) : Participant Set{Name} Set{Secret} Name -> Label [ctor frozen] .
    op _reveal_ : Participant Secret  -> Label [ctor frozen] .
    op _lock-reveal_ : Participant Secret  -> Label [ctor frozen] .
    op _ do withdraw _ _ from _ : Participant Participant Value Name -> Label [ctor frozen] .
    op _authorize_in_ : Participant Contract Name -> Label [ctor frozen] .
    op _lock_in_ : Participant Contract Name -> Label [ctor frozen] .
    op _lock : Participant -> Label [ctor frozen] .


    op delta_ : Nat -> Label [ctor frozen] .

    *** cv(l) : get the name from a label l
    op cv(_) : Label -> Option .
    eq cv(Any do withdraw A v from x) = Some x .
    eq cv(Any split(x)) = Some x .
    eq cv(Any put(x^,a^,y)) = Some y .
    eq cv(l) = None [owise].
    
    op part(_) : Label -> Participant .
    eq part(Any authorize-destroy-of x) = Any .
    eq part(Any destroy x) = Any .
    eq part(Any split(x)) = Any .
    eq part(Any put(x^,a^,y)) = Any .
    eq part(Any reveal a) = Any .
    eq part(Any lock-reveal a) = Any .
    eq part(Any do withdraw A v from x) = Any .
    eq part(Any authorize D in x) = Any .
    eq part(Any lock D in x) = Any .
    
    sort LockContract .
    sort LockSecretReveal .
    subsort LockContract < GuardedContract .
    subsort LockSecretReveal < Configuration .
    
    op Lock : GuardedContract -> LockContract [ctor frozen] .
    op Lock : ConfSec -> LockSecretReveal [ctor frozen] .

    *** strategies
    op strategy : SemConfiguration Label -> Bool [memo] .
    eq strategy(S:SemConfiguration, l) = true [owise] .         *** default: all moves are enabled

    *** Allow progression of labelled configuration (timed)
    
    crl [Rifl] : {l} [t | t^ | icn U cn | Part] S => {l'} [t' | t'^ | icn U cn' | Part] S' 
        if  [t | t^ | icn U cn | Part] S => {l'} [t' | t'^ | icn U cn' | Part] S' .

    rl [Finalize] : {l} [t | t^ | icn U cn | Part] S => [t | t^ | icn U cn | Part] S .

    ***
    *** [...] S => {l} [...] S'    
    ***
    
    *** NOTE: only initial deposits can be destroyed, i.e. those who are in icn
    crl [Dep-AuthDestroy] : [t | t^ | x, icn U cn | Part] < A , v > x | S => { A authorize-destroy-of x } [t | t^ | x, icn U cn | Part] < A , v > x | A [ x |># ] | S
                    if  strategy([t | t^ | x, icn U cn | Part] < A , v > x | S, A authorize-destroy-of x) /\
                        None := (searchAuthDestroy A x S) /\  *** check that A has not already authorized to destroy x
                        (searchLock A S) == false .

    crl [Dep-Destroy] : [t | t^ | icn U cn | Part] < A , v > x | A [ x |># ] | S => { Someone destroy x } [t | t^ | icn U cn | Part] S 
                    if  strategy([t | t^ | icn U cn | Part] < A , v > x | A [ x |># ] | S, Someone destroy x) .

    crl [C-Split] : [t | t^ | icn U cn | Part] < (split (splitEntries) ) + C, v > y | S => { Someone split(y) } [t | t^ | icn U cn, cn' | Part] ((|| splitEntries cn') | S )
                    if  strategy([t | t^ | icn U cn | Part] < (split (splitEntries) ) + C, v > y | S, Someone split(y)) /\
                        cn' := fresh(cn,size(splitEntries)) .

    crl [C-PutReveal] : [t | t^ | icn U cn | Part] < (put x^ reveal a^ if p . C) + C', v > y | S => { Someone put(x^,a^,y) } [t | t^ | icn U cn, z | Part] ( < C, v > z | S'')
                    if  strategy([t | t^ | icn U cn | Part] < (put x^ reveal a^ if p . C) + C', v > y | S, Someone put(x^,a^,y)) /\
                        z := fresh(cn) /\ 
                        Some (S' S'') := (deposits x^ S) /\ *** fetch all deposits x^ in S (S' are deposits in S, S'' == S \ S')
                        Some S''' := (secrets a^ S'') /\    *** fetch all secrets a^ in S
                        S''' |= predicate p .

    crl [C-AuthRev] : [t | t^ | icn U cn | Part] {A : a # N} | S => { A reveal a } [t | t^ | icn U cn | Part] (A : a # N | S) 
                    if (searchLock A S) == false .

    crl [C-Withdraw] : [t | t^ | icn U cn | Part] < withdraw A + C, v > y | S => { Someone do withdraw A v from y } [t | t^ | icn U cn, z | Part] (< A, v > z | S)
                    if  strategy([t | t^ | icn U cn | Part] < withdraw A + C, v > y | S, Someone do withdraw A v from y) /\
                        z := fresh(cn) .

    crl [C-AuthControl] : [t | t^ | icn U cn | Part] < (A, A^) : D + C, v > y | S => { A authorize D in y } [t | t^ | icn U cn | Part] (< (A, A^) : D + C, v > y | A [ y |> (A, A^) : D ] | S)
                    if  (searchLock A S) == false /\
                        None := (searchAuth A ((A, A^) : D) y S) .  *** check that branch D is not already authorized by A

    crl [C-Control1] : [t | t^ | icn U cn | Part] < A^ : after t' : D + C, v > y | S => {l'} [t | t^ | icn U cn' | Part] S'
                    if  t >= t' /\                                                      *** timelocks satisfied
                        Some (S'' S''') := (searchAuth A^ (A^ : after t' : D) y S) /\   *** S'' are authorizations, S''' ==  S \ S''
                        [t | t^ | icn U cn | Part] < D, v > y | S''' => {l'} [t | t^ | icn U cn' | Part] S' /\
                        Some y == cv(l') .                                              *** withdraw/split/put-reveal

    crl [C-Control2] : [t | t^ | icn U cn | Part] < after t' : D + C, v > y | S => {l'} [t | t^ | icn U cn' | Part] S'
                    if  t >= t' /\                                                      *** timelocks satisfied
                        [t | t^ | icn U cn | Part] < D, v > y | S => {l'} [t | t^ | icn U cn' | Part] S' /\       *** D progresses
                        Some y == cv(l') .                                              *** withdraw/split/put-reveal

    crl [C-Control3] : [t | t^ | icn U cn | Part] < A^ : D + C, v > y | S => {l'} [t | t^ | icn U cn' | Part] S'
                    if  Some (S'' S''') := (searchAuth A^ (A^ : D) y S) /\              *** S'' are authorizations, S''' == S \ S''
                        [t | t^ | icn U cn | Part] < D, v > y | S''' => {l'} [t | t^ | icn U cn' | Part] S' /\    *** D progresses
                        Some y == cv(l') .                                              *** withdraw/split/put-reveal

    crl [Delay] : [t | t^ | icn U cn | Part] S => {delta (sd(t',t))} [t' | t'^ | icn U cn | Part] S 
                    if t^ =/= nil /\ t' := head(t^) /\ t'^ := tail(t^) .

    crl [C-Lock] : [t | t^ | icn U cn | Part] S => {Any lock} [t | t^ | icn U cn | Part] lock(Any) | S  
                    if (searchLock Any S) == false .

endm

mod BITML is
    protecting BITML-SEM .
endm

***
*** Strategies
***
smod BITML-STRAT is
    protecting BITML .
    
    strat default @ SemConfiguration .
    strat all\delay @ SemConfiguration .
    strat bitml-1 @ SemConfiguration .
    strat bitml @ SemConfiguration .
    
    *** default Maude strategy
    sd default := all ! .
    sd all\delay := Rifl{bitml-1} or-else (
        Dep-AuthDestroy
      | Dep-Destroy
      | C-Split
      | C-PutReveal
      | C-AuthRev
      | C-Lock
      | C-Withdraw
      | C-AuthControl
      | C-Control1{all\delay}
      | C-Control2{all\delay}
      | C-Control3{all\delay} ) .

    sd bitml-1 := all\delay or-else Delay .
    sd bitml := bitml-1 ! ; Finalize .

    *** Examples
    *** srew [1] in BITML-STRAT : S(WIN') using bitml ! .
    *** srew in BITML-STRAT :  toSemConf < after 10 : withdraw A, 10 satoshi > 'x using bitml ! .
endsm

***
*** Model checking
***

mod BITML-PREDS is
    protecting BITML .    
    protecting SATISFACTION .
    including LTL-SIMPLIFIER .

    subsort LSemConfiguration < State .
    op contract-free : -> Prop .
    op has-deposit : -> Prop .
    op _has-deposit>_ : Participant Value -> Prop .
    op _has-deposit>=_ : Participant Value -> Prop .
    op _has-deposit<=_ : Participant Value -> Prop .
    op _revealed : Secret -> Prop .
    op _revealed-size_ : Secret Nat -> Prop .


    var A : Participant .
    var C : Contract .
    var v : Value .
    var x : Name .
    var S : Configuration .
    var t : Nat .
    var t^ : List{Nat<} .
    var icn cn cn' : Set{Name} .
    var l : Label .
    var Part : Set{Participant} .
    var n m : Nat .
    var a : Secret .

    eq < C, v > x | S |= contract-free = false .
    eq [t | t^ | icn U cn | Part] S |= contract-free = S |= contract-free .
    eq {l} [t | t^ | icn U cn | Part] S |= contract-free = S |= contract-free .
    eq S:Configuration |= contract-free = true [owise] .
    eq S:SemConfiguration |= contract-free = true [owise] .
    eq S:LSemConfiguration |= contract-free = true [owise] .

    eq < A, n satoshi > x | S |= has-deposit = true .
    eq [t | t^ | icn U cn | Part] S |= has-deposit = S |= has-deposit .
    eq {l} [t | t^ | icn U cn | Part] S |= has-deposit = S |= has-deposit .
    eq S:Configuration |= has-deposit = false [owise] .
    eq S:SemConfiguration |= has-deposit = false [owise] .
    eq S:LSemConfiguration |= has-deposit = false [owise] .

    eq A:Participant : a # n:Nat | S |= a revealed = true .
    eq [t | t^ | icn U cn | Part] S |= a revealed = S |= a revealed .
    eq {l} [t | t^ | icn U cn | Part] S |= a revealed = S |= a revealed .
    eq S:Configuration |= a revealed = false [owise] .
    eq S:SemConfiguration |= a revealed = false [owise] .
    eq S:LSemConfiguration |= a revealed = false [owise] .

    ceq A:Participant : a # n | S |= a revealed-size m = true if (n == m) .
    eq [t | t^ | icn U cn | Part] S |= a revealed-size m = S |= a revealed-size m .
    eq {l} [t | t^ | icn U cn | Part] S |= a revealed-size m = S |= a revealed-size m .
    eq S:Configuration |= a revealed-size m = false [owise] .
    eq S:SemConfiguration |= a revealed-size m = false [owise] .
    eq S:LSemConfiguration |= a revealed-size m = false [owise] .

    ceq S |= A has-deposit>= m satoshi = n >= m if n satoshi := value of A in S .
    eq [t | t^ | icn U cn | Part] S |= A has-deposit>= v = S |= A has-deposit>= v .
    eq {l} [t | t^ | icn U cn | Part] S |= A has-deposit>= v = S |= A has-deposit>= v .
    eq S:Configuration |= A has-deposit>= v = false [owise] .
    eq S:SemConfiguration |= A has-deposit>= v = false [owise] .
    eq S:LSemConfiguration |= A has-deposit>= v = false [owise] .

    ceq S |= A has-deposit<= m satoshi = n <= m if n satoshi := value of A in S .
    eq [t | t^ | icn U cn | Part] S |= A has-deposit<= v = S |= A has-deposit<= v .
    eq {l} [t | t^ | icn U cn | Part] S |= A has-deposit<= v = S |= A has-deposit<= v .
    eq S:Configuration |= A has-deposit<= v = false [owise] .
    eq S:SemConfiguration |= A has-deposit<= v = false [owise] .
    eq S:LSemConfiguration |= A has-deposit<= v = false [owise] .

    ceq S |= A has-deposit> m satoshi = n > m if n satoshi := value of A in S .
    eq [t | t^ | icn U cn | Part] S |= A has-deposit> v = S |= A has-deposit> v .
    eq {l} [t | t^ | icn U cn | Part] S |= A has-deposit> v = S |= A has-deposit> v .
    eq S:Configuration |= A has-deposit> v = false [owise] .
    eq S:SemConfiguration |= A has-deposit> v = false [owise] .
    eq S:LSemConfiguration |= A has-deposit> v = false [owise] .
endm

smod BITML-CHECK is
    protecting BITML-STRAT .
    protecting BITML-PREDS .
    *** Model checking w/o strategies
    ***including MODEL-CHECKER .
    *** Model checking w strategies
    including STRATEGY-MODEL-CHECKER .
endsm


*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
***                          _______ _    _ ______   ______ _   _ _____                             ***
***                         |__   __| |  | |  ____| |  ____| \ | |  __ \                            ***
***                            | |  | |__| | |__    | |__  |  \| | |  | |                           ***
***                            | |  |  __  |  __|   |  __| | . ` | |  | |                           ***
***                            | |  | |  | | |____  | |____| |\  | |__| |                           ***
***                            |_|  |_|  |_|______| |______|_| \_|_____/                            ***
***                                                                                                 ***
*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
