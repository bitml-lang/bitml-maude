***
*** Example 1.0
***
***     rewrite in Example-1.0 : S .
***
mod Example-1.0 is
    protecting BITML .

    op A : -> Participant .
    op v : -> Value .
    op x : -> Name .
    op S : -> SemConfiguration .

    *** deposit
    eq S = toSemConf < A, v > x .

    *** strategy
    ***     A does not authorize to destroy the deposit x
    eq strategy(S:SemConfiguration, A authorize-destroy-of x) = false .
endm

***
*** Example 1.1
***
***     rewrite in Example-1.1 : S .
***
mod Example-1.1 is
    protecting BITML .

    ops A B : -> Participant .
    ops v v' : -> Value .
    ops x x' y y' : -> Name .
    op S : -> SemConfiguration .

    *** 2 deposits
    eq S = toSemConf < A, v > x | < A, v > x' | < B, v' > y | < B, v' > y' .

    *** strategy
    ***     A does not authorize to destroy any deposit, B does
    *** result
    ***     only B's deposits will be destroyed
    eq strategy(S:SemConfiguration, A authorize-destroy-of x:Name) = false .
endm

***
*** Example 1.2
***
***     rewrite in Example-1.2 : S .
***
mod Example-1.2 is
    protecting BITML .

    op A : -> Participant .
    op v : -> Value .
    op x : -> Name .
    op S : -> SemConfiguration .

    *** deposit
    eq S = toSemConf < A, v > x .

    *** strategy
    ***     block everything
    eq strategy(S:SemConfiguration, l:Label) = false [owise] .
endm

***
*** Example 2.0
***
***     rewrite in Example-2.0 : S .
***
mod Example-2.0 is
    protecting BITML .

    op A : -> Participant .
    op v : -> Value .
    op x : -> Name .
    op S : -> SemConfiguration .

    *** deposit
    eq S = [0 | 0 4 | x U empty | A] < A, v > x .

    *** strategy
    ***     A does not authorize to destroy the deposit x
    eq strategy([t:Nat | t^:List{Nat<} | cn:Set{Name} U cn':Set{Name} | Part:Set{Participant}] S:Configuration, A authorize-destroy-of x) = 
        t:Nat >= 5 .
endm

***
*** Examples Example-LIQUIDITY
***
***
mod Examples-LIQUIDITY is
    protecting BITML .

    ops A B C : -> Participant .
    op v : -> Value .
    ops a b : -> Secret .
    ops t t' N M : -> Nat .
    op LOTTERY : -> SemConfiguration .
    op LIQUID-LOTTERY : -> SemConfiguration .
    op S : Contract -> SemConfiguration .
    op TCconf : Contract -> SemConfiguration .
    ops WIN WIN' TC TC' TC'' : -> Contract .

    eq t = 10 .
    eq t' = 15 .
    eq N = 1 .
    eq M = 1 .

    *** lottery
    
    eq LOTTERY = S(WIN) .
    eq LIQUID-LOTTERY = S(WIN') .
    
    eq S(WIN:Contract) = 
        toSemConf
        < split(
            2 satoshi ~> ( reveal b if const(0) <= size(b) <= const(1) . withdraw B + after t : withdraw A )
            2 satoshi ~> ( reveal a . withdraw A + after t : withdraw B )
            2 satoshi ~> WIN:Contract
            ), 6 satoshi > 'x
        | { A : a # N } 
        | { B : b # M } .

    eq WIN = reveal (a, b) if size(a) == size(b) . withdraw A
           + reveal (a, b) if size(a) != size(b) . withdraw B .

    eq WIN' = WIN
            + (after t' : reveal a . withdraw A)
            + (after t' : reveal b . withdraw B) .


    eq TCconf(C:Contract) = toSemConf < C:Contract, 2 satoshi > 'x | {A : a # 10} | {B : b # 15} .

    eq TC = reveal a . withdraw A + after t : withdraw B .
    
    eq TC' = reveal a . (
            reveal b . split(
                1 satoshi ~> (withdraw A)
                1 satoshi ~> (withdraw B)
            )
        )
        + after t : withdraw B .

    eq TC'' = reveal a . (
            reveal b . split(
                1 satoshi ~> (withdraw A)
                1 satoshi ~> (withdraw B)
            )
            + after t' : withdraw A
        )
        + after t : withdraw B .

    *** strategies

    eq strategy(S:SemConfiguration, A lock) = false .


    *** A never locks her secrets
    ***eq strategy(S:SemConfiguration, A lock-reveal a:Secret) = false .

    *** A never locks her authorizations
    ***eq strategy(S:SemConfiguration, A lock D:GuardedContract in x:Name) = false .

    *** No one destroys a deposit
    ***eq strategy(S:SemConfiguration, A:Participant authorize-destroy-of x:Name) = false .

    *** A reveals any secret (default any participant reveals any secret)
    ***eq strategy(S:SemConfiguration, A reveal a:Secret) = true .

    *** B does not reveal any secret
    ***eq strategy(S:SemConfiguration, B reveal a:Secret) = false .

    *** No one reveal a secret
    ***eq strategy(S:SemConfiguration, A:Participan t reveal a:Secret) = false .

    *** B authorizes any contract
    ***eq strategy(S:SemConfiguration, B authorize D:GuardedContract in y:Name) = true .

    *** No one authorize any contract
    ***eq strategy(S:SemConfiguration, A:Participant authorize D:Contract in y:Name) = false .
endm

smod Examples-LIQUIDITY-CHECK is
    protecting BITML-CHECK .
    including Examples-LIQUIDITY .
endsm

***


    reduce in Examples-LIQUIDITY-CHECK : modelCheck(LOTTERY, <> contract-free, 'bitml) .           *** false
    reduce in Examples-LIQUIDITY-CHECK : modelCheck(LIQUID-LOTTERY, <> contract-free, 'bitml) .    *** true
    ***reduce in Examples-LIQUIDITY-CHECK : modelCheck(LIQUID-LOTTERY, []<> A has-deposit>= 4 satoshi, 'bitml) .   *** true

    ***reduce in Examples-LIQUIDITY-CHECK : modelCheck(TCconf(TC), <> contract-free, 'bitml) .     *** true
    ***reduce in Examples-LIQUIDITY-CHECK : modelCheck(TCconf(TC'), <> contract-free, 'bitml) .    *** false
    ***reduce in Examples-LIQUIDITY-CHECK : modelCheck(TCconf(TC''), <> contract-free, 'bitml) .   *** true

*** testing the lock functions
reduce  isUnlocked A lock(A) .
reduce  isUnlocked A A : a # 1 .